[
  {
      "id": 1,
      "title": "JavaScript Map Function Example 1",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 2,
      "title": "JavaScript Filter Method Example 1",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 3,
      "title": "JavaScript Reduce Method Example 1",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 4,
      "title": "React useState Hook Example 1",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 5,
      "title": "React useEffect Hook Example 1",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 6,
      "title": "React useContext Hook Example 1",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 7,
      "title": "JavaScript Map Function Example 2",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 8,
      "title": "JavaScript Filter Method Example 2",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 9,
      "title": "JavaScript Reduce Method Example 2",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 10,
      "title": "React useState Hook Example 2",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 11,
      "title": "React useEffect Hook Example 2",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 12,
      "title": "React useContext Hook Example 2",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 13,
      "title": "JavaScript Map Function Example 3",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 14,
      "title": "JavaScript Filter Method Example 3",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 15,
      "title": "JavaScript Reduce Method Example 3",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 16,
      "title": "React useState Hook Example 3",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 17,
      "title": "React useEffect Hook Example 3",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 18,
      "title": "React useContext Hook Example 3",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 19,
      "title": "JavaScript Map Function Example 4",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 20,
      "title": "JavaScript Filter Method Example 4",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 21,
      "title": "JavaScript Reduce Method Example 4",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 22,
      "title": "React useState Hook Example 4",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 23,
      "title": "React useEffect Hook Example 4",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 24,
      "title": "React useContext Hook Example 4",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 25,
      "title": "JavaScript Map Function Example 5",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 26,
      "title": "JavaScript Filter Method Example 5",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 27,
      "title": "JavaScript Reduce Method Example 5",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 28,
      "title": "React useState Hook Example 5",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 29,
      "title": "React useEffect Hook Example 5",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 30,
      "title": "React useContext Hook Example 5",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 31,
      "title": "JavaScript Map Function Example 6",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 32,
      "title": "JavaScript Filter Method Example 6",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 33,
      "title": "JavaScript Reduce Method Example 6",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 34,
      "title": "React useState Hook Example 6",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 35,
      "title": "React useEffect Hook Example 6",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 36,
      "title": "React useContext Hook Example 6",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 37,
      "title": "JavaScript Map Function Example 7",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 38,
      "title": "JavaScript Filter Method Example 7",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 39,
      "title": "JavaScript Reduce Method Example 7",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 40,
      "title": "React useState Hook Example 7",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 41,
      "title": "React useEffect Hook Example 7",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 42,
      "title": "React useContext Hook Example 7",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 43,
      "title": "JavaScript Map Function Example 8",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 44,
      "title": "JavaScript Filter Method Example 8",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 45,
      "title": "JavaScript Reduce Method Example 8",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 46,
      "title": "React useState Hook Example 8",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 47,
      "title": "React useEffect Hook Example 8",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 48,
      "title": "React useContext Hook Example 8",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 49,
      "title": "JavaScript Map Function Example 9",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 50,
      "title": "JavaScript Filter Method Example 9",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 51,
      "title": "JavaScript Reduce Method Example 9",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 52,
      "title": "React useState Hook Example 9",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 53,
      "title": "React useEffect Hook Example 9",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 54,
      "title": "React useContext Hook Example 9",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  },
  {
      "id": 55,
      "title": "JavaScript Map Function Example 10",
      "category": "JavaScript",
      "description": "Creates a new array with the results of calling a function on every element.",
      "code": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
  },
  {
      "id": 56,
      "title": "JavaScript Filter Method Example 10",
      "category": "JavaScript",
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "code": "const ages = [32, 33, 16, 40];\nconst adults = ages.filter(age => age >= 18);\nconsole.log(adults); // [32, 33, 40]"
  },
  {
      "id": 57,
      "title": "JavaScript Reduce Method Example 10",
      "category": "JavaScript",
      "description": "Executes a reducer function on each element of the array, resulting in a single output value.",
      "code": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 10"
  },
  {
      "id": 58,
      "title": "React useState Hook Example 10",
      "category": "React",
      "description": "Returns a stateful value and a function to update it.",
      "code": "const [count, setCount] = useState(0);\n<button onClick={() => setCount(count + 1)}>Increment</button>"
  },
  {
      "id": 59,
      "title": "React useEffect Hook Example 10",
      "category": "React",
      "description": "Runs side-effects after rendering. Can conditionally run with dependencies.",
      "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);"
  },
  {
      "id": 60,
      "title": "React useContext Hook Example 10",
      "category": "React",
      "description": "Accepts a context object and returns the current context value.",
      "code": "const value = useContext(MyContext);\nconsole.log(value);"
  }
]